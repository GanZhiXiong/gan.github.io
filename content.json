{"pages":[{"title":"","text":"687a55402a493b0da7ea62abf22a49a1","link":"/baidu_verify_code-DP2mSmYxSF.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment _config.yml1theme: icarus bash1find / -name '*abc*' 1234567package mainimport &quot;fmt&quot;func main() { fmt.Println(&quot;hello world&quot;)}","link":"/p/4a17b156/"},{"title":"使用go-mssqldb遇到的问题","text":"如果你遇到问题，最好的方法就是阅读官方文档。 关于go-mssqldb的使用，微软写了个很好的示例：Quickstart: Use Golang to query a database in Azure SQL Database or Azure SQL Managed Instance 。 下面编写了我使用go-mssqlddb使用遇到的问题和解决方法。 问题1. Open connection failed:sql: unknown driver “mssql” (forgotten import?)1import _ &quot;github.com/denisenkom/go-mssqldb&quot; 2. Query failed:read tcp 192.168.0.4:56417-&gt;192.168.0.12:1433: read: connection reset by peer1encrypt=disable 3. 调用存储过程报错 sql: expected 0 arguments, got 1我使用的SQL Server版本是2008。百度Google始终没有找到方法，最终在issue中找到了。所以有问题还是多看README、官方文档，以及issue中查找吧！ 解决方法是Open时的参数driverName使用 sqlserver，而不是常看到的 mssql。 4. converting argument $1 type: unsupported type []interface {}, a slice of interface错误使用： 12345func f(query string, args ...interface{}) { ... res, err := db.ExecContext(ctx, query, args) ...} 正确使用： 12345func f(query string, args ...interface{}) { ... res, err := db.ExecContext(ctx, query, args...) ...}","link":"/p/df6ec4e3/"},{"title":"打新冠疫苗经验分享","text":"封面为我打疫苗受的伤😂，不希望大家也像我这样，因此我把经验分享给大家👍！ 5月初打第一针的时候人不多，而且包接送。 今天打第二针是需要预约的（需要通过自己所在的社区进行团队预约，目前已不支持个人预约了。），而且得抢，还不一定能抢到。我约的10点的车，在西乡社区居委会等车都等到快11才来车，原因是打疫苗的地方人太多了，即使把我们送过去，都没有地方可以站人了。到了就在那里排队等待打疫苗，等待区的地方人都站满了，想象一下大热天的站在烈日下的感觉吧。 从10点在社区居委会等车，一直到2点我才打完疫苗。整整4个小时，感觉浪费了大把时间，因此我有必要分享下我的经验： 能打的还是尽早去打吧，毕竟现在免费，会面估计早去打的话估计人更多。 我所在的社区已经不支持个人预约了（深圳），要到通过社区团队预约。 一定要约早一点，最好9点半之前，不然真的人太多了。我还以为周一大家都不会请假，没想到人特别多。 一定要带伞，既可以防晒又可以防雨。 带只笔吧。在社区需要填《知情同意书》，排队打疫苗时要填《声明书》，自己有笔可以边排队边填写。 水也带瓶吧，虽然打第二针的时候是有发水的，还是有备无患吧。 身份证一定要带。 手机充满电，手机充满电，手机充满电。","link":"/p/bb533952/"},{"title":"美的MRC1687-50G净水器滤芯附使用说明书","text":"没想到官方原装净水器滤芯竟然要这么贵！🥴🥴🥴 先附上美的官网MRC1687-50G的使用说明书。 以下表格为我整理的净水器价格。 滤芯 官方上门更换价格 官网价格 使用期限 拼多多 PP棉 88 88 4-6个月 原装全套398 前置活性炭C1 108 108 6-12个月 通用M6全套216 后置活性炭C2 108 108 6-12个月 RO反渗透 298 348 2-3年 602 652-97.80（优惠券）=554.2 我看了下美的的换滤芯说明，看着似乎没那么简单，所以建议第一次换滤芯，真的不会还是不要瞎折腾，还是找官方上门安装，顺便可以自己跟着安装师傅学学怎么安装的，毕竟净水器这玩意涉及到饮水健康。 我是预约美的官方上门更换的，由于和美的出了点意外，所以更换的时候美的免去了PP棉的费用。我是更换了全部滤芯，包括一个不知道是什么的滤芯（如下图所示），该滤芯50元，一共是88+108+108+300+50=654-88=566元。我更换滤芯日期为2021-06-21，也就是22年1月就得更换PP棉或活性炭。","link":"/p/ce2b80bc/"},{"title":"如何测试端口的连通性？","text":"通过命令行测试端口的连通性，可以快速帮助我们排查端口的问题，本文将介绍在macOS、Linux和Windows上如何测试端口的连通性？ Linux和Windows 在Linux和Windows下，我们就直接可以用 telnet 命令来测试端口是否畅通。具体用法：telnet 指定的IP或者域名端口号。 例如： 12telnet 192.168.1.102 3306telnet 127.0.0.1 8090 需要注意的是Windows需要在 启用或关闭Windows功能 中勾选 Telnet Client 。 macOS 1234567891011$ nc -vz -w 2 192.168.100.57 1433found 0 associationsfound 1 connections: 1: flags=82&lt;CONNECTED,PREFERRED&gt; outif en0 src 192.168.100.54 port 63398 dst 192.168.100.57 port 1433 rank info not available TCP aux info availableConnection to 192.168.100.57 port 1433 [tcp/ms-sql-s] succeeded!","link":"/p/bc7e18e1/"},{"title":"iOS 14上UIDatePicker使用旧样式","text":"iOS一旦更新，随之而来的就是App的适配工作。其实大部分App根本不会去用iOS更新后的新特性，所以很多时候的适配都是浪费时间。所以我一再强调跨平台的重要性，注意此跨平台是指不赖原生，因此不会随着iOS更新UI发现变化。比如自绘渲染引擎的Flutter。 问题UIDatePicker在iOS 14上只显示了当天一个日期（如下图所示），且无法滚动选择其他日期。 解决在iOS13.4之后 UIDatePicker 增加了属性preferredDatePickerStyle： 123456789101112131415@available(iOS 13.4, *)public enum UIDatePickerStyle : Int { /// 这个属性会自动为当前平台和模式选择最佳样式。 case automatic = 0 /// 这个属性就是我们常用的那种滚轮的了 case wheels = 1 /// 为日期选择器使用紧凑的样式。 编辑在覆盖中进行。 case compact = 2 /// Use a style for the date picker that allows editing in place. @available(iOS 14.0, *) case inline = 3} 使用如下代码将该属性为 wheels 即可： 123if (@available(iOS 13.4, *)) { _datePicker.preferredDatePickerStyle = UIDatePickerStyleWheels;}","link":"/p/f569bd/"},{"title":"使用hexo-abbrlink插件生成永久短链接","text":"为了解决Hexo默认生成的链接，在修改文件名后，链接会跟这变，如果旧链接在其他地方有被引用，访问旧链接的响应为404错误。且链接为日期 + 目录，层级太多，不利于SEO。 因此急需一种生成永久短链接的方案！ 生成链接的默认配置1permalink: ':year/:month/:day/:title/' :title 指的是文章在_posts目录下的相对路径，不包含文件名后缀。 该配置会生成像下面这样的链接： 文章在_posts目录下 1http://localhost:4000/2021/05/24/hello-world/ 文章在_posts/git目录下 如果文件名为中文，复制的URL是URL编码后的URL，这样不仅显示得很长，不易阅读，而且还不不易于SEO（通常搜索引擎只会爬取URL前三层）。 1http://localhost:4000/2021/05/24/git/Git%20LFS%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%981/ 缺陷 修改文件名后，链接会跟这变。如果旧链接在其他地方有被引用，访问旧链接的响应为404错误。 日期 + 目录，层级太多，不利于SEO。 hexo-abbrlink安装直接看hexo-abbrlink的 README。 配置你可以使用README中的配置。 下面是我的配置： 12345678910111213141516171819# permalink: ':year/:month/:day/:title/'# 生成的文件在public目录下面# permalink: :abbrlink/# 生成的文件在p目录下面permalink: p/:abbrlink/# abbrlink configabbrlink: alg: crc32 #support crc16(default) and crc32 rep: hex #support dec(default) and hex drafts: false #(true)Process draft,(false)Do not process draft. false(default) # Generate categories from directory-tree# depth: the max_depth of directory-tree you want to generate, should &gt; 0auto_category: enable: true #true(default) depth: #3(default) over_write: false auto_title: true #enable auto title, it can auto fill the title by pathauto_date: false #enable auto date, it can auto fill the date by time todayforce: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. 配置完成后先执行 hexo clean ，然后执行 hexo g 重新生成。 它会在每篇MarkDown的front matter中添加 abbrlink，例如： 123456789101112---title: 使用hexo-abbrlink插件生成永久短链接typora-copy-images-to: uploadcategories: - Blog - Hexoabbrlink: fcaf5192date: 2021-06-01 12:52:35tags: - Blog - Hexo--- 我的配置生成的链接如下： 12http://localhost:4000/p/bb533952/http://localhost:4000/p/5a8bb790/ 问题此插件我也发现了一个问题：如果没有title，生成的abbrlink为’0’ #56。","link":"/p/fcaf5192/"},{"title":"如何修改gitalk的CSS样式","text":"icarus主题是自带评论插件的，评论插件由ppoffice/hexo-component-inferno提供。具体启用评论插件的操作请看 Icarus用户指南 - 用户评论插件。 我启用了Gitalk作为评论插件，Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。但是其默认是浅色模式，而我的博客是深色模式，这样配色就很不协调了。因此我需要将Gitalk的浅色模式改为和我博客一致的深色模式。 步骤修改CSS文件修改CSS文件有两种方法。 方法一：直接在gitalk.js中修改 打开你博客目录下的 node_modules/hexo-component-inferno/lib/view/comment/gitalk.js 文件。 找到 cssUrl: helper.cdn('gitalk', '1.7.2', 'dist/gitalk.css'), 将其注释。在其下行添加 cssUrl: '/css/gitalk.css', 。 gitalk.js12345678910111213141516171819202122232425Gitalk.Cacheable = cacheComponent(Gitalk, 'comment.gitalk', function (props) { var helper = props.helper, comment = props.comment; // FIXME: config name change var id = crypto.createHash('md5').update(props.page.path).digest('hex'); return { id: id, repo: comment.repo, owner: comment.owner, admin: comment.admin, clientId: comment.client_id, clientSecret: comment.client_secret, createIssueManually: comment.create_issue_manually, distractionFreeMode: comment.distraction_free_mode, pagerDirection: comment.pager_direction, perPage: comment.per_page, proxy: comment.proxy, flipMoveOptions: comment.flip_move_options, enableHotKey: comment.enable_hotkey, language: comment.language, // cssUrl: helper.cdn('gitalk', '1.7.2', 'dist/gitalk.css'), cssUrl: '/css/gitalk.css', jsUrl: helper.cdn('gitalk', '1.7.2', 'dist/gitalk.min.js') };}); 方法二：在_config.icarus.yml中配置 打开 _config.icarus.yml。 在 comment 下添加 cssUrl ，值为 '/css/gitalk.css'。 12comment: cssUrl: '/css/gitalk.css' 打开你博客目录下的 node_modules/hexo-component-inferno/lib/view/comment/gitalk.js 文件。 找到 cssUrl: helper.cdn('gitalk', '1.7.2', 'dist/gitalk.css'), 将其注释。在其下行添加 cssUrl: comment.cssUrl, 创建gitalk.css 在此你博客目录下创建此文件 themes/icarus/source/css/gitalk.css 。 通过浏览器的DevTools工具调整gitalk的CSS后，拷贝gitalk.css的内容到 themes/icarus/source/css/gitalk.css中。 重新生成执行 hexo g 重新生成静态文件。打开生成的静态文件，可以看到css文件路径变化了。","link":"/p/89673c2d/"},{"title":"SQL Server字符串拼接的结果为NULL的问题","text":"问题某个存储过程的参数有一个输出参数：@msg nvarchar(1024) output ，拼接的字符串会赋值给@msg，然后C#代码获取@msg后显示到界面上。 通过测试后发现字符串和变量拼接竟然变成了空字符串： 1234567declare @msg nvarchar(512)declare @name varchar(50)set @name='gan'declare @time datetime-- CONVERT(varchar,@time,20)是将时间格式化输出set @msg= 'test: ' + CONVERT(varchar,@time,20) + CAST(@name as varchar)select '1' + @msg + '2' 解决本以为使用convert和cast将类型转换为varchar字符类型就没有问题了。 检查发现，是由于@time为NULL导致的(变量声明之后的默认值为NULL)。 解决办法就是使用 isnull 将为NULL的变量转换为空字符串： 1234567declare @msg nvarchar(512)declare @name varchar(50)set @name='gan'declare @time datetimeselect @timeset @msg= 'test: ' + CONVERT(varchar,ISNULL(@time, ''),20) + CAST(ISNULL(@name, '') as varchar)select '** ' + @msg + ' **'","link":"/p/93f760c5/"},{"title":"如何在macOS上安装SQL Server ?","text":"SQL Server是不能直接安装在macOS上的，但是从SQL Server 2017开始，支持了Linux，因此可以通过Docker使其在macOS上运行。 步骤1. 安装Docker在macOS上如何安装Docker请看官方文档 Install Docker Desktop on Mac。官方文档写的很详细，这里我就不介绍了。 2. 拉取 SQL Server 镜像执行如下命令拉取 SQL Server 镜像: bash1sudo docker pull mcr.microsoft.com/mssql/server:2017-latest 3. 使用 SQL Server 镜像创建并运行容器执行如下命令使用 mcr.microsoft.com/mssql/server:2017-latest 镜像，创建一个名称为 sqlserver 的容器，该容器的端口为1433。 123sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=Passw0rd&quot; \\ -p 1433:1433 --name sqlserver \\ -d mcr.microsoft.com/mssql/server:2017-latest -e &quot;ACCEPT_EULA=Y&quot; 将 ACCEPT_EULA 变量设置为任意值，以确认接受最终用户许可协议。 -e &quot;SA_PASSWORD=Passw0rd&quot; 指定至少包含 8 个字符且符合 SQL Server 密码要求的强密码。 -p 1433:1433 将主机环境中的 TCP 端口（第一个值）映射到容器中的 TCP 端口（第二个值）。 --name sqlserver 为容器指定一个自定义名称，而不是使用随机生成的名称。 如果执行上述命令报错了，可以通过执行 docker logs 命令检查错误日志。 4. 查看容器是否运行1docker ps 5. 在容器内连接SQL Server（可选） 使用 docker exec -it 命令在运行的容器内部启动交互式 `Bash Shell: 1sudo docker exec -it sqlserver &quot;bash&quot; sql1 是在创建容器时由 –name 参数指定的名称。 在容器内部使用 sqlcmd 进行本地连接。 默认情况下，sqlcmd 不在路径之中，因此需要指定完整路径。 1/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P &quot;Passw0rd&quot; 如果成功，应会显示 sqlcmd 命令提示符 1&gt;。 6. 利用Navicat可视化工具连接Sql Server","link":"/p/9d314fb4/"},{"title":"如何正确的将字符串数组传给in","text":"问题C#使用join将数组的元素用逗号分隔为字符串传递给SQL Server存储过程要么报错，要么查询的表格结果为0条数据。 C#中的代码如下： 1234DataTable dataTable = DbHelperSQL.RunProcedure(&quot;proc_Data_GetUploadInfo&quot;, new IDataParameter[] { new SqlParameter(&quot;@BillCodes&quot;, $&quot;'{string.Join(&quot;','&quot;, result.Select(x =&gt; x.prepare_num.ToString()).ToArray())}'&quot;), }, &quot;get&quot;).Tables[0]; 解决经过各种尝试，我使用 exec sp_executesql @sql 这种方式解决的: 1234declare @sql nvarchar(max)set @sql='select * from (select BillCode,BillType,NetWeight,Tare,TareWeightTime,GrossWeight,GrossWeightTime from OrderInfo union select BillCode,BillType,NetWeight,Tare,TareWeightTime,GrossWeight,GrossWeightTime from EndInfo) as u where u.BillCode in('+@BillCodes+')'exec sp_executesql @sql 如果你有更好的方法，请在评论区留言。","link":"/p/5a8bb790/"},{"title":"Git LFS使用遇到的问题","text":"1. this exceeds GitHub’s file size limit of 100.00MB对于大型文件的版本控制，我按照https://git-lfs.github.com/ 操作后，还是提示下图error： 接着我运行命令git lfs track ，该命令的作用是显示 Git LFS 当前正在跟踪的所有模式的列表（以及它们在其中定义的.gitattributes 文件）。 果然这个路径是不对的，而且多出了 [[:space:]]。 解决 可以直接删除 .gitattributes文件或使用 git lfs untrack path不跟踪指定大文件。 重新执行 git lfs track EzvizLIB/libEZOpenSDK.a跟踪该文件。 再次查看跟踪文件列表。 再次push，问题解决。 2. clone下拉又LFS跟踪的文件大小只有134字节 通过搜索得知： 在安装 Git LFS 之前，克隆了使用 Git LFS 的仓库，则被 Git LFS 管理的文件会被显示为文本指针，而非具体的文件。 查看这些文件指针，会发现类似如下内容 version https://git-lfs.github.com/spec/v1 oid sha256:4b99dbe6fe6f646b2026de93481045bbf34f995559db15fce34d192f1f320ef4 size 156154 解决办法就是，手动执行获取 Git LFS 对象的命令： git lfs fetch git lfs checkout # 或 git lfs pull 解决 在一篇文章 https://zzz.buzz/zh/2016/04/19/the-guide-to-git-lfs/找到可疑方法，如下图所示： 于是执行如下命令： 1git lfs pull 执行后提示如下： 根据上一步提示，很明显没有安装lfs。从 https://git-lfs.github.com/或binary packages 下载二进制包，下载解压后，执行 .install.sh安装lfs。 再次执行 sudo git lfs pull (不加sudo，会提示无权限)，提示如下图所示： fetch失败，我想应该是网络问题，于是给终端添加代理后（注意添加后sudo命令默认是不会走代理的，因此你还需要让sudo命令走代理，方法自行搜索），再次执行 sudo git lfs pull 还是提示上图的错误。执行不带sudo的 git lfs pull 却能下载成功，但是提示 permission denied : 于是尝试重新clone却可以了。 3. 收到 At 80% of Git LFS data quota for GanZhiXiong这样的邮箱邮箱内容为： We wanted to let you know that you’ve used 80% of your data plan for Git LFS on your personal account GanZhiXiong. No immediate action is necessary, but you might want to consider purchasing additional data packs to cover your bandwidth and storage usage: https://github.com/account/billing/data/upgrade Current usage as of 21 May 2021 09:54AM UTC: Bandwidth: 0.89 GB / 1 GB (89%) Storage: 0.22 GB / 1 GB (22%) 翻译过来为： 谨在此告知您，您的个人帐户GanZhiXiong已将80％的数据计划用于Git LFS。 无需立即采取措施，但是您可能要考虑购买其他数据包来覆盖您的带宽和存储使用情况： https://github.com/account/billing/data/upgrade 截至2021年5月21日UTC的当前使用情况： 带宽：0.89 GB / 1 GB（89％） 储存空间：0.22 GB / 1 GB（22％） 你可以在 https://github.com/settings/billing 此页查看到LFS的可用存储空间和带宽： 通过 https://docs.github.com/cn/github/managing-large-files/versioning-large-files/about-storage-and-bandwidth-usage 此页可以得知GitHub为每个使用 Git Large File Storage 的帐户都会获得 1 GB 的免费存储空间和一个月的免费带宽 1 GB。 如果带宽和存储配额不够，您可以选择为 Git LFS 购买额外配额。 你可以 https://github.com/account/billing/data/upgrade 此页购买Git LFS额外配额。","link":"/p/448598ca/"},{"title":"Windows上有没有类似tail -f这样的命令？","text":"很多时候我们要监听日志文件的演变，在Linux或Unix上可以通过 tail -f filename 命令把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。 那么在Windows上有没有类似命令呢？ 使用PowerShell实现你可以使用 Get-Content 或 cat 命令实现 tail -f 的功能。 使用Get-Content命令1Get-Content filename.log -Wait 可以将 Get-Content 缩短为gc。 但是该命令是将filename.log整个文件显示到标准输出。那我想显示最后n行或从n行显示到最后该怎么做呢？别急我们先看看tail是如何实现的。 tail显示最后n行tail -f 是默认显示文件最后10行，如果再加上 -n 参数，则可指定显示文件的尾部的行数。如下面这条命令表示显示文件最后3行，并动态显示追加内容： 1tail -n 3 -f ~/Downloads/1 或： 1tail -n -3 -f ~/Downloads/1 当然你可以省略 -n，也就是： 1tail -3 -f ~/Downloads/1 tail从n行显示到最后如果我想从第3行开始显示到最后呢？可使用如下命令： 1tail -n +3 -f ~/Downloads/1 或： 1tail +3 -f ~/Downloads/1 可见这些操作使用tail命令时多么的方便呀！ Get-Content显示最后n行如显示最后3行，使用如下命令： 1gc filename.log -tail 3 -Wait 使用git-bash实现首先git-bash从https://gitforwindows.org/安装 接下来，git-bash使用 Windows 路径并重新启动您的工作站： 1setx path &quot;%path%;C:\\Program Files\\Git\\bin\\&quot; 现在，您应该能够使用tail -n 20 -F logging_file.log尾随任何文件并显示最后 20 行。 参考 Is there an equivalent of tail -f on Windows?","link":"/p/73f53bd4/"},{"title":"解决PowerShell中文乱码","text":"使用PowerShell打开文本，文本里面有中文显示乱码。我尝试了几种方法，都不行，最终通过开启**Beta版：使用Unicode UTF-8提供全球语言支持(U)**解决。 以下方法对我不行，你也可以试下方法一：修改PowerShell编码格式为UTF-8查看PowerShell的当前编码格式： 1checp 临时修改PowerShell编码格式为UTF-8： 1chcp 65001 此设置只对当前终端有效，重新开启powershell终端则恢复GBK编码，若想永久修改PowerShell编码格式UTF-8，快捷键win+R输入regedit进入注册表，找到[HKEY_CURRENT_USER\\Console\\CodePage]，修改其值为65001。 方法二：PowerShell配置文件中添加OutputEncoding查看PowerShell配置文件所在的位置： 1$PROFILE 在该配置文件中添加如下配置： 1$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding 对我有效的方法 打开控制面板，点击区域。 点击更改系统区域设置。 勾选 Beta版：使用Unicode UTF-8提供全球语言支持(U) 重启电脑。","link":"/p/f1b9f4fc/"},{"title":"A valid provisioning profile for this executable was not found","text":"问题 使用Xcode Version 12.5 (12E262)安装App到iPhone失败，错误提示为：A valid provisioning profile for this executable was not found.。详情如下图所示： 解决 点击 File -&gt; Project Settings… 将Build System修改为 Legacy Build System（Deprecate）（遗留的构建系统(反对)） 从警告提示可以看出，Legacy Build System 将会被移除，不建议使用。暂时先这么，这个问题后面再解决！","link":"/p/3eabba2e/"},{"title":"macOS、Linux安装Zsh和Oh My Zsh教程","text":"前言Linux系统提供多种不同的Shell以供选择。常用的有 Bourne Shell（简称sh）、C-Shell（简称csh）、Korn Shell（简称ksh）和 Bourne Again Shell （简称 bash ）等。对于经常使用终端的用户，我推荐大家都安装Zsh，因为体验更好。 Zsh什么是ZshZsh官网是这么介绍的 Zsh is a shell designed for interactive use, although it is also a powerful scripting language. More information can be found on the “Zsh Web Pages” sites.Zsh是一种为交互使用而设计的shell，尽管它也是一种强大的脚本语言。更多信息可在“Zsh网页”网站上找到。 Zsh Web Pages是这么介绍的 Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into Zsh; many original features were added. The introductory document details some of the unique features of Zsh. It assumes basic knowledge of the standard UNIX shells; the intent is to show a reader already familiar with one of the other major shells what makes Zsh more useful or more powerful. This document is not at all comprehensive; read the manual entry for a description of the shell that is complete, concise and up-to-date, although somewhat overwhelming and devoid of examples. Alternatively, the user guide offers wordy explanations of many of the shell’s features. If you want to read something that has been polished by a professional editor you can buy the book.Zsh是一种为交互使用而设计的shell，尽管它也是一种功能强大的脚本语言。bash、ksh和tcsh的许多有用特性都被合并到Zsh中;添加了许多原始的特性。介绍性文档详细介绍了Zsh的一些独特特性。它假定您具有标准UNIX shell的基本知识;其目的是向已经熟悉其他主要shell之一的读者展示使Zsh更有用或更强大的原因。这份文件一点也不全面;阅读手册条目，了解完整、简洁和最新的shell描述 Zsh也称为Z shell，是Bourne Shell（sh）的扩展版本，具有大量新功能，并支持插件和主题。 由于它基于与Bash相同的shell，因此Zsh具有许多相同的功能，并且切换是轻而易举的。 Zsh主要功能 自动cd：只需输入目录的名称即可 递归路径扩展：例如“/ u / lo / b”扩展为“/ usr / local / bin” 拼写更正和近似完成：如果您输入目录名称时出现轻微错误，Zsh将为您解决此问题 插件和主题支持： Zsh包含许多不同的插件框架 Linux安装Zsh 查看下剩余空间12345678[admin@Main ~]$ df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 40G 29G 8.5G 78% /devtmpfs 1.9G 0 1.9G 0% /devtmpfs 1.9G 0 1.9G 0% /dev/shmtmpfs 1.9G 185M 1.7G 10% /runtmpfs 1.9G 0 1.9G 0% /sys/fs/cgrouptmpfs 380M 0 380M 0% /run/user/1000 查看Linux信息123456[admin@Main ~]$ lsb_release -aLSB Version: :core-4.1-amd64:core-4.1-noarchDistributor ID: CentOSDescription: CentOS Linux release 7.0.1406 (Core) Release: 7.0.1406Codename: Core 查看当前使用的Shell12[admin@Main ~]$ echo $SHELL/bin/bash 查看安装的Shell123456789[admin@Main ~]$ cat /etc/shells /bin/sh/bin/bash/sbin/nologin/usr/bin/sh/usr/bin/bash/usr/sbin/nologin/bin/tcsh/bin/csh 可以看到CentOS7默认没有安装Zsh 安装Zsh12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[admin@Main ~]$ sudo yum install zsh[sudo] password for admin: Loaded plugins: langpacksRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fastbase | 3.6 kB 00:00:00 epel | 4.7 kB 00:00:00 extras | 2.9 kB 00:00:00 https://repo.mongodb.org/yum/redhat/7/mongodb-org/3.4/x86_64/repodata/repomd.xml: [Errno 12] Timeout on https://repo.mongodb.org/yum/redhat/7/mongodb-org/3.4/x86_64/repodata/repomd.xml: (28, 'Operation timed out after 3024 milliseconds with 0 out of 0 bytes received')Trying other mirror.mongodb-org-3.4 | 2.5 kB 00:00:00 updates | 2.9 kB 00:00:00 (1/8): epel/x86_64/group_gz | 95 kB 00:00:00 (2/8): epel/x86_64/updateinfo | 1.0 MB 00:00:00 (3/8): base/7/x86_64/group_gz | 153 kB 00:00:00 (4/8): base/7/x86_64/primary_db | 6.1 MB 00:00:00 (5/8): epel/x86_64/primary_db | 6.9 MB 00:00:00 (6/8): extras/7/x86_64/primary_db | 206 kB 00:00:00 (7/8): updates/7/x86_64/primary_db | 3.8 MB 00:00:00 (8/8): mongodb-org-3.4/7/primary_db | 99 kB 00:00:02 Resolving Dependencies--&gt; Running transaction check---&gt; Package zsh.x86_64 0:5.0.2-34.el7_8.2 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved========================================================================================================================================================= Package Arch Version Repository Size=========================================================================================================================================================Installing: zsh x86_64 5.0.2-34.el7_8.2 updates 2.4 MTransaction Summary=========================================================================================================================================================Install 1 PackageTotal download size: 2.4 MInstalled size: 5.6 MIs this ok [y/d/N]: yDownloading packages:zsh-5.0.2-34.el7_8.2.x86_64.rpm | 2.4 MB 00:00:00 Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : zsh-5.0.2-34.el7_8.2.x86_64 1/1 Verifying : zsh-5.0.2-34.el7_8.2.x86_64 1/1 Installed: zsh.x86_64 0:5.0.2-34.el7_8.2 Complete! 查看Zsh是否已安装12345678910[admin@Main ~]$ cat /etc/shells/bin/sh/bin/bash/sbin/nologin/usr/bin/sh/usr/bin/bash/usr/sbin/nologin/bin/tcsh/bin/csh/bin/zsh 切换到Zsh1234[admin@Main ~]$ chsh -s /bin/zshChanging shell for admin.Password: Shell changed. reboot12345678[admin@Main ~]$ reboot==== AUTHENTICATING FOR org.freedesktop.login1.reboot ===Authentication is required for rebooting the system.Authenticating as: rootPassword: ==== AUTHENTICATION COMPLETE ===Connection xxx closed by remote host.Connection to xxx closed. 重启在进入Linux，提示如下信息：1234567891011121314151617This is the Z Shell configuration function for new users,zsh-newuser-install.You are seeing this message because you have no zsh startup files(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory~). This function can help you with a few settings that shouldmake your use of the shell easier.You can:(q) Quit and do nothing. The function will be run again next time.(0) Exit, creating the file ~/.zshrc containing just a comment. That will prevent this function being run again.(1) Continue to the main menu.--- Type one of the keys in parentheses --- 按 1 进入主菜单然后提示如下信息： 1234567891011121314151617181920Please pick one of the following options:(1) Configure settings for history, i.e. command lines remembered and saved by the shell. (Recommended.)(2) Configure the new completion system. (Recommended.)(3) Configure how keys behave when editing command lines. (Recommended.)(4) Pick some of the more common shell options. These are simple &quot;on&quot; or &quot;off&quot; switches controlling the shell's features. (0) Exit, creating a blank ~/.zshrc file.(a) Abort all settings and start from scratch. Note this will overwrite any settings from zsh-newuser-install already in the startup file. It will not alter any of your other settings, however.(q) Quit and do nothing else. The function will be run again next time.--- Type one of the keys in parentheses --- 直接输入一个 0 会在 ～ 目录下生成一个空的 .zshrc 配置文件。然后提示如下信息： 1234567891011The function will not be run in future, but you can runit yourself as follows: autoload -Uz zsh-newuser-install zsh-newuser-install -fThe code added to ~/.zshrc is marked by the lines# Lines configured by zsh-newuser-install# End of lines configured by zsh-newuser-installYou should not edit anything between these lines if you intend torun zsh-newuser-install again. You may, however, edit any other partof the file. 查看是否切换为Zsh 12 [admin@Main]~% echo $SHELL/bin/zsh Oh My Zsh什么是Oh My Zsh首先看下Oh My Zsh 官网的介绍 Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. Sounds boring. Let’s try again. Oh My Zsh will not make you a 10x developer…but you may feel like one. Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you’ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, “that is amazing! are you some sort of genius?” Finally, you’ll begin to get the sort of attention that you have always felt you deservedOh My Zsh是一个用于管理Zsh配置的开源、社区驱动的框架。听起来无聊。让我们再试一次。哦，我的Zsh不会让你成为一个10倍的开发人员…但你可能觉得自己就是。一旦安装，您的终端外壳将成为讨论城镇或您的钱回来!在命令提示符中的每一次按键，您将利用数百个强大的插件和美丽的主题。在咖啡馆里，陌生人会走到你面前问你:“太棒了!”你是什么天才吗?”最后，你会开始得到你一直认为自己应该得到的关注 简单来说就是配置很麻烦，Oh My Zsh这个框架开源简化Zsh的配置，并且提供了Plugins、Community、Themes 下图为官网介绍的Oh My Zsh三大功能 安装Oh My Zsh官方提供了两种安装方式 通过curl1sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 通过weget1sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot; 我这里使用curl安装123456789101112131415161718192021222324252627[admin@Main]~% sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;Cloning Oh My Zsh...Cloning into '/home/admin/.oh-my-zsh'...remote: Enumerating objects: 1156, done.remote: Counting objects: 100% (1156/1156), done.remote: Compressing objects: 100% (1124/1124), done.remote: Total 1156 (delta 21), reused 1067 (delta 16), pack-reused 0Receiving objects: 100% (1156/1156), 775.41 KiB | 16.00 KiB/s, done.Resolving deltas: 100% (21/21), done.Looking for an existing zsh config...Found ~/.zshrc. Backing up to /home/admin/.zshrc.pre-oh-my-zshUsing the Oh My Zsh template file and adding it to ~/.zshrc. __ __ ____ / /_ ____ ___ __ __ ____ _____/ /_ / __ \\/ __ \\ / __ `__ \\/ / / / /_ / / ___/ __ \\/ /_/ / / / / / / / / / / /_/ / / /_(__ ) / / /\\____/_/ /_/ /_/ /_/ /_/\\__, / /___/____/_/ /_/ /____/ ....is now installed!Before you scream Oh My Zsh! please look over the ~/.zshrc file to select plugins, themes, and options.• Follow us on Twitter: https://twitter.com/ohmyzsh• Join our Discord server: https://discord.gg/ohmyzsh• Get stickers, shirts, coffee mugs and other swag: https://shop.planetargon.com/collections/oh-my-zsh 安装前和安装后对比这里以ll命令来对比很明显能够看出变化了 安装zsh-syntax-highlighting语法高亮插件 Clone this repository in oh-my-zsh’s plugins directory1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting Activate the plugin in ~/.zshrc:1vim ~/.zshrc plugins添加zsh-syntax-highlighting1234plugins=( git, zsh-syntax-highlighting) 执行source ~/.zshrc 相较于纯白字的命令，添加这个插件后，现在我们的命令语法高亮了 安装zsh-autosuggestions历史记录插件 Clone this repository in oh-my-zsh’s plugins directory1git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions Activate the plugin in ~/.zshrc:1vim ~/.zshrc plugins添加zsh-autosuggestions12345plugins=( git, zsh-syntax-highlighting, zsh-autosuggestions) 执行source ~/.zshrc 快看有历史记录提示了，按下右方向键即可自动选中 安装incr自动提示插件incr官网incr是一款自动提示插件，功能非常强大，官网演示demo，感受一下 创建incr目录mkdir $ZSH_CUSTOM/plugins/incr 下载incrwget http://mimosa-pudica.net/src/incr-0.2.zsh -O $ZSH_CUSTOM/plugins/incr/incr.plugin.zsh Activate the plugin in ~/.zshrc:1vim ~/.zshrc plugins添加incr123456plugins=( git, zsh-syntax-highlighting, zsh-autosuggestions, incr) 执行source ~/.zshrc 修改主题默认主题是robbyrussell我习惯用的主题是ys，接下来我将默认主题修改ys vim ~/.zshrc 找到ZSH_THEME=&quot;robbyrussell&quot;将robbyrussell修改为ys 执行source ~/.zshrc 主题效果图如下： 错误insecure directories, run compaudit for list. 当ssh连接到Linux时 当执行source ~/.zshrc时 会报如下错误提示 123456789101112131415161718192021[oh-my-zsh] Insecure completion-dependent directories detected:drwxrwxr-x 2 admin admin 4096 Aug 13 13:11 /home/admin/.oh-my-zsh/custom/plugins/incrdrwxrwxr-x 7 admin admin 4096 Aug 13 12:56 /home/admin/.oh-my-zsh/custom/plugins/zsh-autosuggestionsdrwxrwxr-x 7 admin admin 4096 Aug 13 12:37 /home/admin/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting[oh-my-zsh] For safety, we will not load completions from these directories until[oh-my-zsh] you fix their permissions and ownership and restart zsh.[oh-my-zsh] See the above list for directories with group or other writability.[oh-my-zsh] To fix your permissions you can do so by disabling[oh-my-zsh] the write permission of &quot;group&quot; and &quot;others&quot; and making sure that the[oh-my-zsh] owner of these directories is either root or your current user.[oh-my-zsh] The following command may help:[oh-my-zsh] compaudit | xargs chmod g-w,o-w[oh-my-zsh] If the above didn't help or you want to skip the verification of[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.zsh compinit: insecure directories, run compaudit for list.Ignore insecure directories and continue [y] or abort compinit [n]? y% 有两种解决方法 方法一，修改目录权限 使用compaudit命令查看被标记为不安全的文件夹 给不安全的目录添加权限1chmod 755 /home/admin/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting 方法二，跳过不安全目录的验证 在.zshrc文件的第一行添加1ZSH_DISABLE_COMPFIX=true 执行source ~/.zshrc 支持🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟 我会持续编写文章，保持每周至少一篇文章。💪 有时候编写一篇文章需要大量时间。💪 您只需一秒即可完成【点赞👍或关注❤️】。💪 您的支持将给与我更大的动力。💪 🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟🤟","link":"/p/9dad8f4e/"},{"title":"The certificate used to sign YoSmart-Beta has either expired or has been revoked. An updated certificate is required to sign and install the application.","text":"iOS开发真机调试的Run时候报错 The certificate used to sign &quot;YoSmart-Beta&quot; has either expired or has been revoked. An updated certificate is required to sign and install the application.。但是Build是成功的。 然后我到钥匙串中查看此证书，竟然提示 证书不受信任 ： 然后Google到是缺少一个证书：Worldwide Developer Relations - G3 (Expiring 02/20/2030 00:00:00 UTC) 。点这里下载安装此证书。 果然，安装此证书后，开发证书就变成有效的了：","link":"/p/5b8d378e/"},{"title":"An error was encountered while attempting to communicate with this device. (The service is…droid","text":"Xcode真机调试报错如下图所示： Build没有问题，Install也没有问题，就是App不能启动。 点击Details，详细信息显示如下： 经搜索发现是因为使用Xcode 11真机调试iOS 14是不行的。 解决方法就是升级Xcode 11到Xcode 12。","link":"/p/8e1fc01c/"},{"title":"关于GoLand创建项目勾选index entire GOPATH导致的问题","text":"使用GoLand创建项目默认是勾选 Index entire GOPATH 的 。下面分别介绍勾选或不勾选 Index entire GOPATH 的区别。 创建项目时勾选index entire GOPATH勾选index entire GOPATH会导致创建出来的项目不能导自定义的包和函数： GOPATH的配置： 创建项目时不勾选index entire GOPATH和勾选报错是一样的。 GOPATH配置： 如何解决不能导自定义的包和函数的问题 打开GOPATH配置。 Project GOPATH添加当前项目所在的路径。 经过测试只要配置了Project GOPATH，够不够选 Use GOPATH that's defined in system environment 和 Index entire GOPATH 都能成功导入自定义包和函数了。","link":"/p/14f74a7e/"},{"title":"这样配置Typora插入图片时的规则很好👍","text":"上图分如下两种情况： 1. 图片保存在本地 我使用的规则是插入图片时，复制图片到md所在目录的 md文件名.assets 目录中。 我只需要对本地图片使用此规则，因此勾选 对本地位置的图片应用上述规则 。 勾选 优先使用相对路径 ，使用相对路径方便将md拷贝其他电脑。 2. 图片上传到服务器Typora现在支持 YAML Front Matter了，在文章的顶部输入---然后按下Enter就会创建。或者从段落菜单中点击 YAML Front Matter 。例如： 12345678910---title: &quot;这样配置Typora插入图片时的规则很好\\U0001F44D&quot;typora-copy-images-to: uploadtoc: truedate: 2021-06-21 09:46:16tags: - Typora - PicGo - YAML Front Matter--- 而勾选 允许根据YAML设置自动上传图片 将根据YAML是否配置了 typora-copy-images-to: upload 决定是否上传图片。若需要上传图片，请添加 typora-copy-images-to: upload 配置，且配置好上传服务，上传服务建议使用PicGo，配置GitHub图床，粘贴图片后就会自动上传，简直爽的不要不要。","link":"/p/23079ada/"},{"title":"Microsoft Remote Desktop如何拷贝文件到Mac ？","text":"你以为Microsoft Remote Desktop通过复制、粘贴快捷键就可以将远程桌面Windows中的文件拷贝到Mac中吗？试试你就知道，这样虽然能将文件拷贝到Mac，但是却和源文件不同。 比如你在Windows上新建一个1.txt，并写入内容，选中文件，然后按下Ctrl + C，接着再Mac的Finder目录中按下Comand + V。你会发现文件虽然拷贝过来了，但是打开1.txt的内容却为空。 那么如何正确的将Windows中文件拷贝到Mac中呢？正确步骤如下： 点击编辑PC按钮。 勾选 Redirect folders。 添加要将Windows文件拷贝到Mac中的目录。比如我配置为dell目录（如上图所示）。 重新连接Windows，你就会在文件资源管理器中发现Mac共享的文件夹dell。 将要拷贝到Mac中的文件直接拷贝到共享目录dell即可。","link":"/p/8b2e9334/"},{"title":"SQL Server如何生成表结构和数据的脚本?","text":"在想要在开发环境中复现生成环境中的问题，我们可能需要备份生产环境的数据库到开发环境进行测试，但是往往生成环境的中的数据库很大，备份会很慢，其实往往只是在访问某个表时才出现此问题，也仅仅只需要此表即可。 因此我们需要使用一种方法来导出生产环境指定表的结构和数据的脚本，然后在开发环境执行该脚本，即可得到生产环境的数据。 那么SQL Server是否提供此功能呢？ 答案是，不啰嗦，直接介绍步骤： 选择数据库，右键选择任务，点击生成脚本。 选择要生成脚本的表。 点击高级，配置 要编写脚本的数据类型 为 架构和数据。 完成上述步骤，即可导出表结构和数据的脚本。","link":"/p/f1f1706b/"},{"title":"DataTabel转换List时GetProperty反射赋值报错：从“System.String”到“System.Nullable[[System.DateTime]的强制转换无效","text":"在写代码时经常会碰见可空类型的数据段，Table转换List和List转Table时会很头疼，现在记录下解决方案。 DataTable转换为List下方代码适合所有可空类型的转换——TableToList： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public static List&lt;T&gt; TableToEntity&lt;T&gt;(DataTable dt) where T : class, new() { // 定义集合 List&lt;T&gt; ts = new List&lt;T&gt;(); if (dt != null &amp;&amp; dt.Rows.Count &gt; 0) { // 获得此模型的类型 Type type = typeof(T); string tempName = &quot;&quot;; foreach (DataRow dr in dt.Rows) { T t = new T(); // 获得此模型的公共属性 PropertyInfo[] propertys = t.GetType().GetProperties(); foreach (PropertyInfo pi in propertys) { tempName = pi.Name; // 检查DataTable是否包含此列 if (dt.Columns.Contains(tempName)) { // 判断此属性是否有Setter if (!pi.CanWrite) continue; object value = dr[tempName]; if (value != DBNull.Value) { //pi.SetValue(t, value, null); // pi.SetValue(t, Convert.ChangeType(value, pi.PropertyType, CultureInfo.CurrentCulture), null); pi.SetValue(t, ChanageType(value,pi.PropertyType), null); } } } ts.Add(t); } } return ts; } //转换可空类型 如：DateTime? private static object ChanageType(object value, Type convertsionType) { //判断convertsionType类型是否为泛型，因为nullable是泛型类, if (convertsionType.IsGenericType &amp;&amp; //判断convertsionType是否为nullable泛型类 convertsionType.GetGenericTypeDefinition().Equals(typeof(Nullable&lt;&gt;))) { if (value == null || value.ToString().Length == 0) { return null; } //如果convertsionType为nullable类，声明一个NullableConverter类，该类提供从Nullable类到基础基元类型的转换 NullableConverter nullableConverter = new NullableConverter(convertsionType); //将convertsionType转换为nullable对的基础基元类型 convertsionType = nullableConverter.UnderlyingType; } return Convert.ChangeType(value, convertsionType); } List转换为DataTable下方代码为List转Table: 1234567891011121314151617181920212223242526/// &lt;summary&gt; /// 转化一个DataTable /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt; /// &lt;param name=&quot;list&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static DataTable ToDataTable&lt;T&gt;(IEnumerable&lt;T&gt; list) { //创建属性的集合 List&lt;PropertyInfo&gt; pList = new List&lt;PropertyInfo&gt;(); //获得反射的入口 Type type = typeof(T); DataTable dt = new DataTable(); //把所有的public属性加入到集合 并添加DataTable的列 Array.ForEach&lt;PropertyInfo&gt;(type.GetProperties(), p =&gt; { pList.Add(p); dt.Columns.Add(p.Name, p.PropertyType); }); foreach (var item in list) { //创建一个DataRow实例 DataRow row = dt.NewRow(); //给row 赋值 pList.ForEach(p =&gt; row[p.Name] = p.GetValue(item, null)); //加入到DataTable dt.Rows.Add(row); } return dt; } 但是如果实体类有可空类型的又会报错：System.NotSupportedException: DataSet 不支持 System.Nullable&lt;&gt; 解决方法： 12345678910111213141516171819202122232425262728293031323334353637public static DataTable ToDataTable&lt;T&gt;(IEnumerable&lt;T&gt; list) { try { DataTable dtReturn = new DataTable(); // column names PropertyInfo[] oProps = null; // Could add a check to verify that there is an element 0 foreach (T rec in list) { // Use reflection to get property names, to create table, Only first time, others will follow if (oProps == null) { oProps = ((Type)rec.GetType()).GetProperties(); foreach (PropertyInfo pi in oProps) { Type colType = pi.PropertyType; if ((colType.IsGenericType) &amp;&amp; (colType.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;))) { colType = colType.GetGenericArguments()[0]; } dtReturn.Columns.Add(new DataColumn(pi.Name, colType)); } } DataRow dr = dtReturn.NewRow(); foreach (PropertyInfo pi in oProps) { dr[pi.Name] = pi.GetValue(rec, null) == null ? DBNull.Value : pi.GetValue(rec, null); } dtReturn.Rows.Add(dr); } return dtReturn; } catch(Exception es) { throw es; } }","link":"/p/ee63ef96/"},{"title":"Golang语言现状优缺全面分析","text":"本文将对Golang语言现状优缺点全面分析，主要包括Go语言的优势、强项、成就、缺点。 本文是根据B站“刘丹冰aceld”的视频做了一个文字描述。具体请看https://www.bilibili.com/video/av200269949/。 Golang的优势 Golang的强项 Golang的成就 Golang的缺点","link":"/p/f76282da/"},{"title":"01《Go语言入门》Go语言简介：历史背景、发展现状及语言特性","text":"这是我纯手写的《Go语言入门》，手把手教你入门Go。源码+文章，看了你就会🥴！文章中所有的代码我都放到了github.com/GanZhiXiong/go_learning这个仓库中！看文章时，对照仓库中代码学习效果更佳哦！ 历史背景为Google内部挑战而设计Go语言最开始的设计是为了解决Google内部面临的一些挑战而诞生的。这些挑战就包括如下： 多核硬件架构 超大规模分布式计算集群 Web模式导致的前所未有的开发规模和更新速度 2007年9开始设计罗伯特·格瑞史莫（Robert Griesemer），罗勃·派克（Rob Pike）及肯·汤普逊（Ken Thompson）于2007年9月开始设计Go。而这三位Go语言的创始人都是IT界的超级大神。 Ken Thompson（肯·汤普逊） Unix之父（他和C语言之父丹尼斯·里奇一起开发了Unix操作系统） C语言创始人（C语言之父和他，在他开发的B语言基础上开发了C语言) 1983年获图灵奖 Rob Pike（罗勃·派克） Unix的早期开发者 UTF-8创始人 Robert Griesemer（罗伯特·格瑞史莫） Google V8、Chubby和HotSpot JVM的主要贡献者。 2009年11月正式推出Go于2009年11月正式宣布推出，成为开放源代码项目，并在Linux及Mac OS X平台上进行了实现，后来追加了Windows系统下的实现。 2016最佳语言在2016年，Go被软件评价公司TIOBE 选为“TIOBE 2016 年最佳语言”。 语言特性简单 语言 关键字 Go 25个 C 37个 C++ 84个 高效 支持垃圾回收 支持指针直接访问内存生产力 语法简洁 特别的接口类型 编程约束，很多编程语言都支持复合（Compostion）和继承，复合是大于继承的，在设计模式中经常讲到多用复合，少用继承 发展现状云计算语言 Docker Kubernetes 区块链语言 ethereum HYPERLEDGER","link":"/p/dfeea5ca/"},{"title":"02《Go语言入门》编写第一个Go程序Hello, World","text":"安装Go的步骤，以及编写第一个Go程序”Hello, World!”。 这是我纯手写的《Go语言入门》，手把手教你入门Go。源码+文章，看了你就会🥴！文章中所有的代码我都放到了github.com/GanZhiXiong/go_learning这个仓库中！看文章时，对照仓库中代码学习效果更佳哦！ 环境安装下载安装包 进入Golang官网 https://golang.org/ 需要科学上网 https://golang.google.cn/无法科学上网的请访问这个 下载安装包 安装macOS安装如果下载的是pkg文件，则直接双击运行安装；如果下载的是tar.gz压缩文件，则按照Linux安装步骤进行安装。 Linux安装 在终端将包解压到/usr/local目录下 1tar -C /usr/local -xzf 压缩包文件名 # 如go1.15.6.linux-amd64.tar.gz 配置环境变量在$HOME/.profile或/etc/profile中（对于系统范围的安装）添加如下脚本 1export PATH=$PATH:/usr/local/go/bin 执行source命令 123source $HOME/.profile# orsource /etc/profile Windows安装直接下载.msi文件，下载后直接安装。默认是安装在C:\\Go目录下，安装包的形式安装应该是不需要再配置环境变量的。 验证打开终端，输入go或go env或go version。如果能识别go命令，则说明安装成功。 编写Hello World 打开终端，新建test.go文件 输入如下代码12345package mainimport &quot;fmt&quot;func main() { fmt.Println(&quot;Hello, World!&quot;)} 运行go run test.go","link":"/p/c02a6a8c/"},{"title":"03《Go语言入门》GoPath 和 GoRoot简介","text":"先是简单介绍了上一篇文中写的Hello, World程序的代码，然后抛出程序如何找到fmt包这个问题，而该问题就涉及到GoPath和GoRoot。通过GoPath讲了如何引用GitHub上的包，并分析了在测试过程中执行 go run XXX_test.go 报错的问题。 这是我纯手写的《Go语言入门》，手把手教你入门Go。源码+文章，看了你就会🥴！文章中所有的代码我都放到了github.com/GanZhiXiong/go_learning这个仓库中！看文章时，对照仓库中代码学习效果更佳哦！ Hello World程序的过程是怎样的？通过上一篇文章，我们编写了第一个Go程序，那么这个代码过程又是怎样的呢？这里还是把代码再贴出来： 12345package mainimport &quot;fmt&quot;func main() { fmt.Println(&quot;Hello, World!&quot;)} 第一行代码：建立一个名为main的package，这里的package和Java里面的package是类似的。 第二行代码：导入“fmt”这个包，用于调用Println这个函数。 第三行代码：写一个main()函数。 那么问题来了，“fmt”包是怎么找到的呢？这里就需要我们了解GoRoot和GoPath了。 GoPath和GoRootGoPath是Go的工作目录GoRoot是Go的安装目录使用go env命令可以查看GoPath和GoRoot GoRootfmt包正是通过GoRoot下的src目录找到，在src目录下面我们可以看到有内置的包和函数，如fmt、math、strings等。如果我想是用GitHub上的开源包，该怎么使用呢？那就得用到GoPath了 GoPathGoPath目录约定了三个子目录 src：存放源代码。go run、go install等命令会在此路径下执行 pkg：存放编译时生成的中间文件（*.a） bin： 存放编译后生成的可执行文件（执行go install，会在bin目录下生成可执行文件） 引用GitHub上的包我们要引用GitHub上github.com/gomodule/redigo/redis这个包用进行Redis的操作，该怎么引用呢？ 执行go get github.com/gomodule/redigo/redis获取包获取后，会在GoPath的src目录下生成一个/github.com/gomodule/redigo这样的目录（如果从未运行go get命令，GoPath目录是空的） 在项目中引用创建redis_test.go文件将下面代码写入到redis_test.go1234567891011121314package mainimport ( &quot;fmt&quot; &quot;github.com/gomodule/redigo/redis&quot;)func main() { c, err := redis.Dial(&quot;tcp&quot;, &quot;127.0.0.1:6379&quot;) if err != nil { fmt.Println(&quot;Connect to redis error&quot;, err) return } fmt.Println(&quot;redis connect succ&quot;) defer c.Close()} go run: cannot run *_test.go files执行go run redis_test.go竟然报错了，这是你可能会觉得是代码的问题。🥴🥴🥴你错了。这不是错误，它是这样设计的。 go run将检测_test文件并将其视为程序包的测试文件，测试文件将被编译为单独的程序包，然后与主要测试二进制文件链接并运行。 详情见testing system 您不能将程序文件命名为* _test.go，因为这是集成的Go测试系统的一部分要编写一个新的测试套件，请创建一个名称以_test.go结尾的文件，其中包含TestXxx函数，如此处所述。 将文件与要测试的文件放在同一软件包中。 该文件将从常规软件包生成中排除，但在运行“ go test”命令时将包括在内。 有关更多详细信息，请运行“ go help test”和“ go help testflag”。 参考go not running program with name package_test.go 解决：你只需要将redis_test.go文件名中的test前面的下划线去掉或使用其他名称即可解决","link":"/p/86d4b7a7/"},{"title":"06《Go语言入门》Go程序结构、入口、退出返回值及获取命令函参数","text":"切记：基础知识和设计原理真的很重要。切记：慢工出细活，心急吃不了热豆腐。 Go程序结构一个基本的Go程序代码由三部分构成： 包 引入依赖 main函数程序入口12345678910111213// 包，表明代码所在的模块（包）package main// 引入代码依赖// IDE会自动导入包，所以可以直接使用fmt，而不需要写下面代码import &quot;fmt&quot; // 程序入口，功能实现func main() { fmt.Println(&quot;Start&quot;) fmt.Println(&quot;Hello, World!&quot;) fmt.Println(&quot;End&quot;)} 程序入口Go程序的入口必须要满足以下两个要求： 必须是main包：package main 比如将main修改为main1，就会提示一个警告⚠️Unused function 'main'，并且go build hello.go Configuration不可用。如下图所示： 必须是main函数：func main() 比如将函数名称修改为其他名称，同样会出现这个上图一样的问题。 需要注意的是：Go文件名不一定是main.go 退出返回值C++或Java通过main函数可以返回值的，例如返回退出的状态。但是Go中的main函数是不支持任何返回值的。编写代码验证如下图所示： os.Exit(code)在Go中main函数返回程序退出状态，**使用os.Exit(code)**，code的范围为0-125。 正常退出code使用0 异常退出code使用非0 获取命令行传参C++和Java的main函数是支持传入参数的，但是Go语言main函数则不支持。但是它可以和Node.js一样通过命令行传入参数在代码中，通过os.Args获取参数数组例如：","link":"/p/74b87465/"},{"title":"05《Go语言入门》使用GoLand创建、运行和调试Hello, World程序","text":"Go语言开发用什么IDEGo语言开发能使用的IDE可多了，如GoLand、Eclipse、VSCode、Atom等，甚至有不少Gopher使用Vim。 但是，我还是建议初学者使用GoLand作为Go语言开发的IDE，理由很简单，其他IDE需要安装Go插件，GoLand开箱即用，且功能更强大。 唯一缺点就是使用GoLand需要付费。虽然网上有需要共享的License或破解方法，但是还是推荐大家使用正版。Jetbrains出品，必属精品！使用Jetbrains公司出品的IDE，让我更加专注于写代码。 参考：Golang有哪些ide？ - 波罗学的回答 - 知乎 使用GoLand创建Hello, World 创建go_learning Project 创建src目录Go语言规定了src目录为源码目录。 创建package在src目录下创建一个名为main的package 创建hello.go 在main目录下面创建hello.go 1234567package main// IDE会自动导入包，所以可以直接使用fmt，而不需要写下面代码import &quot;fmt&quot;func main() { fmt.Println(&quot;Hello, World!&quot;)} Run将光标定位到绿色运行三角形图标所在的行，然后按下option + enter，选择run或debug，如下图所示：一旦运行了一次，go build hello.go就会添加到Run/Debug Configurations，下次运行就可以直接按 Control + R运行了。 Debug为了能够打更多断点进行调试，我添加了打印Start和End，并且打上断点，如下图所示：按下Debug快捷键Control + D即可进行调试。 Run/Debug 快捷键 快捷键 描述 Control + R Run Control + D Debug Comand + F2 Stop Command + R Rerun Comand + F8 Toggle Line Breakpoint（光标所在行添加或删除断点） Comand + Shift + F8 View Breakpoints（编辑所有断点） Comand + Option + R Resume Program（跳转到下一个断点） F8 Step over（逐过程，不进入函数） F7 Step Into（逐语句，进入函数） Shift + F8 Step Out（跳出函数） Shift + F9 Run to Cursor（运行到光标所在行）","link":"/p/f86503f9/"},{"title":"04《Go语言入门》Go常用命令介绍","text":"Go提供了很多命令，我们可以通过在终端输入go回车，即可看到： go run编译并执行，只能作用于命令源码文件，一般用于开发中快速测试。如go run test.go go build编译代码包或源码文件。 如果带上包名，表示编译指定的代码包 如果带上源码文件，表示编译指定源码文件go get下载第三方代码包并编译安装。它会下载安装到GOPATH环境变量配置的第一个工作区中。 如上文03 | GoPath 和 GoRoot简介介绍了如何下载GitHub上的代码包。 go install 用于编译安装，将编译后的生成的执行文件放到工程的bin目录下，将生成的归档文件（静态链接库）存放到工程的pkg目录下。 使用方式类似于go build。 可以作用于main包和非main包。 可以在某个代码包目录下直接使用，也可以指定代码包使用。 可以替代go get比如使用go get https://github.com/gomodule/redigo可以下载编译安装代码包。其实也可以直接下载zip压缩包，然后将压缩包解压到GoPath的src目录下，形成github.com/gomodule/redigo目录结构，再执行go install github.com/gomodule/redigo/redis，就会在GoPath的pkg目录下生成/darwin_arm64/github.com/gomodule/redigo目录结构，在redigo目录下会生成一个redis.a的文件。 .a文件是编译过程中生成的，每个package都会生成对应的.a文件，Go在编译的时候先判断package的源码是否有改动，如果没有的话，就不再重新编译.a文件，这样可以加快速度。 go env用于打开Go语言的环境变量。 如： GOPATH是工作区目录 GOROOT是Go语言安装目录 GOBIN是通过go install命令生成可执行文件的存放目录（默认是当前工作区的bin目录） GOEXE为生成可执行文件的后缀go vet代码静态检查工具。如go vet test.go","link":"/p/1932c6e1/"},{"title":"如何让我的网站被Google收录更多？","text":"建站一个月了，发现在谷歌中的收录有点少，我将网站添加到谷歌搜索控制台后，仅仅过去16个小时，收录就增加了83个网址。 对于 hexo 博客来说，如果你是部署在 GitHub Pages，那么你是无法被百度收录的，因为 GitHub 禁止了百度爬虫，最常见的解决办法是双线部署到 Coding Pages 和 GitHub Pages，因为百度爬虫可以爬取到 Coding 上的内容，从而实现百度收录，如果你的 hexo 博客还没有实现双线部署，请参考：《Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS》，另外百度收录的所需的时间较长，大约半个月左右才会看到效果！ 以后有时间了在实现双线部署，因此我也仅在 百度搜索资源平台 中添加了本网站和 sitemap ，仅仅做这些不知道能否被百度收录还有待观察。（在百度搜索资源平台中添加网站和谷歌相似，看了本文估计你也会了，因此不再复述。） 添加前使用 site:域名 查看网站是否被收录，我的博客搭建了有差不多一个月了，之前也没提交过网站到谷歌搜索控制台，不过谷歌爬虫的确是强大，即使没有提交过，现在也能看到39条结果了： 将网站添加到谷歌搜索控制台 打开 谷歌搜索控制台。 添加资源。 选择资源类型，输入域名或网址。 有两种验证方式，分别是网域和网址前缀，两种资源类型区别如下： 由对比可知选择网域资源验证方式比较好，只需要一个域名就可以匹配到多种格式的 URL 验证域名所有权。 就是验证这个域名是不是属于你的。 推送网站中网址链接上面步骤完成后，还需要推送网址链接给谷歌。推送网址链接有两种形式： 单独逐条添加 以站点地图添加，google会隔一段时间抓取站点地图中的网址链接 建议采用站点地图的形式添加，一劳永逸，除非有些网址不在站点地图中，我们才采用单独添加。 安装 hexo-generator-sitemap在blog根目录npm下载生成站点地图插件： 1npm install hexo-generator-sitemap --save 然后每次hexo g后都会在public根目录生成一个sitemap.xml文件，揪下来我们将该文件的网址链接提交给google站点，就ok了。 添加站点地图网址 添加后添加后仅仅过去16个小时，网站在谷歌中的收录就从39上升到122，收录增加了83个网址。","link":"/p/c55658d2/"}],"tags":[{"name":"新冠疫苗","slug":"新冠疫苗","link":"/tags/%E6%96%B0%E5%86%A0%E7%96%AB%E8%8B%97/"},{"name":"净水器","slug":"净水器","link":"/tags/%E5%87%80%E6%B0%B4%E5%99%A8/"},{"name":"Telnet","slug":"Telnet","link":"/tags/Telnet/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Gitalk","slug":"Gitalk","link":"/tags/Gitalk/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"SQL Server","slug":"SQL-Server","link":"/tags/SQL-Server/"},{"name":"in","slug":"in","link":"/tags/in/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Navicat","slug":"Navicat","link":"/tags/Navicat/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"LFS","slug":"LFS","link":"/tags/LFS/"},{"name":"PowerShell","slug":"PowerShell","link":"/tags/PowerShell/"},{"name":"tail","slug":"tail","link":"/tags/tail/"},{"name":"Get-Content","slug":"Get-Content","link":"/tags/Get-Content/"},{"name":"Xcode","slug":"Xcode","link":"/tags/Xcode/"},{"name":"Zsh","slug":"Zsh","link":"/tags/Zsh/"},{"name":"Oh My Zsh","slug":"Oh-My-Zsh","link":"/tags/Oh-My-Zsh/"},{"name":"Go","slug":"Go","link":"/tags/Go/"},{"name":"GoLand","slug":"GoLand","link":"/tags/GoLand/"},{"name":"GOPATH","slug":"GOPATH","link":"/tags/GOPATH/"},{"name":"Typora","slug":"Typora","link":"/tags/Typora/"},{"name":"PicGo","slug":"PicGo","link":"/tags/PicGo/"},{"name":"YAML Front Matter","slug":"YAML-Front-Matter","link":"/tags/YAML-Front-Matter/"},{"name":"go-mssqldb","slug":"go-mssqldb","link":"/tags/go-mssqldb/"},{"name":"Microsoft Remote Desktop","slug":"Microsoft-Remote-Desktop","link":"/tags/Microsoft-Remote-Desktop/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"GoPath","slug":"GoPath","link":"/tags/GoPath/"},{"name":"GoRoot","slug":"GoRoot","link":"/tags/GoRoot/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"},{"name":"Google","slug":"Google","link":"/tags/Google/"}],"categories":[{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"Go","slug":"Go","link":"/categories/Go/"},{"name":"Life","slug":"Life","link":"/categories/Life/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"iOS","slug":"iOS","link":"/categories/iOS/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"DB","slug":"DB","link":"/categories/DB/"},{"name":"Git LFS","slug":"Git/Git-LFS","link":"/categories/Git/Git-LFS/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"Xcode","slug":"iOS/Xcode","link":"/categories/iOS/Xcode/"},{"name":"Hexo","slug":"Blog/Hexo","link":"/categories/Blog/Hexo/"},{"name":"SQL Server","slug":"DB/SQL-Server","link":"/categories/DB/SQL-Server/"},{"name":"PowerShell","slug":"Windows/PowerShell","link":"/categories/Windows/PowerShell/"},{"name":"GoLand","slug":"Go/GoLand","link":"/categories/Go/GoLand/"},{"name":"Mac","slug":"Mac","link":"/categories/Mac/"},{"name":"C#","slug":"C","link":"/categories/C/"},{"name":"Go语言入门","slug":"Go/Go语言入门","link":"/categories/Go/Go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"}]}